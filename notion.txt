

# File: .gitignore
# Environment Variables
.env

# Python virtual environment
venv/

# Byte-compiled Python files
**/__pycache__/
**/*.pyc

# VSCode settings
.vscode/

plugins



# File: README.md
# Notion Automation

This repository contains scripts and configurations to automate task creation in Notion. It is designed to be extensible for future automations.

## Setup

1. **Clone the repository:**
   ```bash
   git clone https://github.com/atxtechbro/notion-automation.git
   cd notion-automation
   ```

2. **Create and activate a virtual environment:**
   ```bash
   python -m venv venv
   source venv/bin/activate   # On Windows, use `venv\Scripts\activate`
   ```

3. **Install the required packages:**
   ```bash
   pip install -r requirements.txt
   ```

4. **Set up environment variables:**
   Create a `.env` file in the root of the repository and add your Notion API key and the Notion page ID where the database will be created:
   ```env
   NOTION_API_KEY=your_notion_api_key
   NOTION_PAGE_ID=your_notion_page_id
   ```

5. **Ensure your directory structure is as follows:**
   ```
   notion-automation/
   ├── venv/
   ├── scripts/
   │   ├── __init__.py
   │   └── create_database.py
   ├── config/
   │   └── database_configs/
   │       └── gym_strength_ifbb_training.json
   ├── .env
   ├── requirements.txt
   └── main.py
   ```

6. **Run the script:**
   ```bash
   python -m scripts.create_database gym_strength_ifbb_training
   ```

### Example Usage

To create a database using the `gym_strength_ifbb_training` configuration, use the following command:
```bash
python -m scripts.create_database gym_strength_ifbb_training
```

This will create a Notion database and tasks based on the `gym_strength_ifbb_training.json` configuration file located in the `config/database_configs/` directory.

### Notes

- Ensure that your Notion API key and page ID are correctly set in the `.env` file.
- The JSON configuration files should be placed in the `config/database_configs/` directory.
- You can add more configurations by creating additional JSON files in the `config/database_configs/` directory and running the script with the respective configuration name.

By following these steps, you should be able to automate the creation of databases and tasks in Notion efficiently.

# File: requirements.txt
requests
python-dotenv
pydantic
click

# File: scripts/create_database.py
import argparse
import os
from notion_client.api import NotionClient
from notion_client.config import ConfigManager

def main(schema_name, tasks_name):
    config_manager = ConfigManager(config_path='plugins')
    schema = config_manager.load_schema(schema_name)
    tasks = config_manager.load_tasks(tasks_name)

    notion_api_key = os.getenv('NOTION_API_KEY')
    notion_page_id = os.getenv('NOTION_PAGE_ID')

    notion_client = NotionClient(api_key=notion_api_key)
    database_id = notion_client.create_database(parent_id=notion_page_id, schema=schema)

    for task in tasks:
        notion_client.create_task(database_id=database_id, task=task)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Create a Notion database.")
    parser.add_argument('schema', type=str, help="Schema name without extension.")
    parser.add_argument('tasks', type=str, help="Tasks name without extension.")
    args = parser.parse_args()
    main(args.schema, args.tasks)


# File: scripts/update_database.py
import argparse
from notion_utils.NotionUtils import load_schema, load_tasks, update_database, create_task

def main(database_id, schema_name, tasks_name):
    try:
        # Load schema and tasks configuration
        schema = load_schema(schema_name)
        tasks = load_tasks(tasks_name)

        # Update the database with the provided schema
        update_database(database_id, schema)

        # Add tasks to the updated database
        schema_properties = schema["properties"]
        for task in tasks["tasks"]:
            create_task(database_id, task, schema_properties)

    except FileNotFoundError as e:
        print(e)
    except ValueError as e:
        print(f"Validation Error: {e}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Update an existing Notion database using specified schema and tasks templates.")
    parser.add_argument('database_id', type=str, help="The ID of the database to update.")
    parser.add_argument('schema', type=str, help="The name of the schema template to use (without .json extension).")
    parser.add_argument('tasks', type=str, help="The name of the tasks template to use (without .json extension).")
    
    args = parser.parse_args()
    main(args.database_id, args.schema, args.tasks)


# File: setup.sh
