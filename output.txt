

# File: cli.py
# File: cli.py
import argparse
import json
import os

from dotenv import load_dotenv

from notion_client.api import NotionClient
from notion_client.models import PropertyConfig, PropertyOption, SchemaConfig, TaskConfig, TaskProperty

# Load environment variables from .env
load_dotenv()

def create_database(schema_path, tasks_path):
    """Creates a Notion database and adds tasks."""
    notion_api_key = os.getenv('NOTION_API_KEY')
    notion_page_id = os.getenv('NOTION_PAGE_ID')

    if not notion_api_key or not notion_page_id:
        print("Error: Please set the NOTION_API_KEY and NOTION_PAGE_ID in the .env file.")
        return

    try:
        with open(schema_path, 'r') as schema_file:
            schema_data = json.load(schema_file)

        # Convert schema_data into SchemaConfig
        properties = {}
        for name, prop in schema_data['properties'].items():
            property_type = next(iter(prop))
            prop_details = prop[property_type]
            options_data = prop_details.get('options', [])
            options = [PropertyOption(**option) for option in options_data]
            properties[name] = PropertyConfig(property_type=property_type, options=options)

        schema_config = SchemaConfig(title=schema_data['title'], properties=properties)

        with open(tasks_path, 'r') as tasks_file:
            tasks_data = json.load(tasks_file)

        tasks_config = []
        for task in tasks_data.get('tasks', []):
            task_properties = {}
            for name, prop in task['properties'].items():
                task_properties[name] = TaskProperty(**prop)
            tasks_config.append(TaskConfig(properties=task_properties))

    except FileNotFoundError as e:
        print(f"Error: {e}")
        return
    except json.JSONDecodeError as e:
        print(f"Error parsing JSON: {e}")
        return

    notion_client = NotionClient(api_key=notion_api_key)

    try:
        database_id = notion_client.create_database(parent_id=notion_page_id, schema=schema_config)
        print(f"Database created successfully with ID: {database_id}")

        for task in tasks_config:
            notion_client.create_task(database_id=database_id, task=task)
        print("Tasks added successfully.")
    except Exception as e:
        print(f"Error creating database or tasks: {e}")

if __name__ == "__main__":
    # Set up argument parser
    parser = argparse.ArgumentParser(description="Create a Notion database and add tasks.")
    parser.add_argument('--schema', required=True, help='Path to the JSON schema file.')
    parser.add_argument('--tasks', required=True, help='Path to the JSON tasks file.')

    # Parse the arguments
    args = parser.parse_args()

    # Call the create_database function with the provided arguments
    create_database(args.schema, args.tasks)


# File: notion_client\api.py
# File: notion_client/api.py
import requests

from .logger import logger
from .models import SchemaConfig, TaskConfig


class NotionClient:
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json",
            "Notion-Version": "2022-06-28"
        }

    def create_database(self, parent_id: str, schema: SchemaConfig) -> str:
        url = 'https://api.notion.com/v1/databases'
        data = {
            "parent": {"type": "page_id", "page_id": parent_id},
            "title": [{"type": "text", "text": {"content": schema.title}}],
            "properties": schema.to_notion_properties()
        }
        try:
            response = requests.post(url, headers=self.headers, json=data)
            response.raise_for_status()
            database_id = response.json()["id"]
            logger.info(f"Database '{schema.title}' created with ID: {database_id}")
            return database_id
        except requests.exceptions.HTTPError as e:
            logger.error(f"Failed to create database: {e.response.text}")
            raise

    def create_task(self, database_id: str, task: TaskConfig):
        url = 'https://api.notion.com/v1/pages'
        data = {
            "parent": {"database_id": database_id},
            "properties": task.to_notion_properties()
        }
        try:
            response = requests.post(url, headers=self.headers, json=data)
            response.raise_for_status()
            logger.info(f"Task created in database '{database_id}'.")
        except requests.exceptions.HTTPError as e:
            logger.error(f"Failed to create task: {e.response.text}")
            raise


# File: notion_client\config.py
import os
import json
from typing import List
from .models import SchemaConfig, TaskConfig
import os
import json

class ConfigManager:
    def __init__(self, config_path='plugins'):
        self.config_path = config_path

    def load_schema(self, schema_name: str) -> SchemaConfig:
        file_path = os.path.join(self.config_path, f"{schema_name}.json")
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"Schema file '{file_path}' not found.")
        with open(file_path, 'r') as file:
            data = json.load(file)
        return SchemaConfig(**data)

    def load_tasks(self, tasks_name: str) -> list:
        file_path = os.path.join(self.config_path, f"{tasks_name}.json")
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"Tasks file '{file_path}' not found.")
        with open(file_path, 'r') as file:
            data = json.load(file)
        tasks = [TaskConfig(**task) for task in data.get("tasks", [])]
        return tasks


# File: notion_client\logger.py
# File: notion_client/logger.py
import logging
import sys

# Create a logger
logger = logging.getLogger('notion_automation')
logger.setLevel(logging.DEBUG)

# Create handlers
c_handler = logging.StreamHandler(sys.stdout)
f_handler = logging.FileHandler('notion_automation.log')
c_handler.setLevel(logging.INFO)
f_handler.setLevel(logging.DEBUG)

# Create formatters
c_format = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
f_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

c_handler.setFormatter(c_format)
f_handler.setFormatter(f_format)

# Add handlers to the logger
logger.addHandler(c_handler)
logger.addHandler(f_handler)


# File: notion_client\models.py
# File: notion_client/models.py
from typing import Any, Dict, List, Optional

from pydantic import BaseModel


class PropertyOption(BaseModel):
    name: str
    color: Optional[str] = None

    def to_notion_format(self):
        data = {'name': self.name}
        if self.color is not None:
            data['color'] = self.color
        return data

class PropertyConfig(BaseModel):
    property_type: str
    options: Optional[List[PropertyOption]] = None

    def to_notion_format(self):
        notion_property = {}
        if self.property_type == "title":
            notion_property = {"title": {}}
        elif self.property_type == "select":
            notion_property = {
                "select": {
                    "options": [option.to_notion_format() for option in self.options]
                }
            }
        elif self.property_type == "date":
            notion_property = {"date": {}}
        # Add other property types as needed
        else:
            raise ValueError(f"Unsupported property type: {self.property_type}")
        return notion_property

class SchemaConfig(BaseModel):
    title: str
    properties: Dict[str, PropertyConfig]

    def to_notion_properties(self):
        return {name: prop.to_notion_format() for name, prop in self.properties.items()}

class TaskProperty(BaseModel):
    type: str
    value: Any = None  # Some properties like 'title' or 'rich_text' won't have a simple 'value'

    def to_notion_format(self):
        if self.type == "title":
            return {
                "title": [{
                    "type": "text",
                    "text": {"content": self.value if self.value else ""}
                }]
            }
        elif self.type == "rich_text":
            return {
                "rich_text": [{
                    "type": "text",
                    "text": {"content": self.value if self.value else ""}
                }]
            }
        elif self.type == "select":
            return {"select": {"name": self.value}}
        elif self.type == "number":
            return {"number": self.value}
        else:
            raise ValueError(f"Unsupported task property type: {self.type}")

class TaskConfig(BaseModel):
    properties: Dict[str, TaskProperty]

    def to_notion_properties(self):
        return {name: prop.to_notion_format() for name, prop in self.properties.items()}


# File: scripts\create_database.py
import argparse
import os
from notion_client.api import NotionClient
from notion_client.config import ConfigManager

def main(schema_name, tasks_name):
    config_manager = ConfigManager(config_path=args.config_path)

    schema = config_manager.load_schema(schema_name)
    tasks = config_manager.load_tasks(tasks_name)

    notion_api_key = os.getenv('NOTION_API_KEY')
    notion_page_id = os.getenv('NOTION_PAGE_ID')

    notion_client = NotionClient(api_key=notion_api_key)
    database_id = notion_client.create_database(parent_id=notion_page_id, schema=schema)

    for task in tasks:
        notion_client.create_task(database_id=database_id, task=task)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Create a Notion database.")
    parser.add_argument('schema', type=str, help="Schema name without extension.")
    parser.add_argument('tasks', type=str, help="Tasks name without extension.")
    parser.add_argument('--config-path', type=str, default='plugins', help="Path to the configuration directory.")
    args = parser.parse_args()
    main(args.schema, args.tasks)


# File: scripts\update_database.py
# File: scripts/update_database.py
import argparse
import os
from notion_client.api import NotionClient
from notion_client.config import ConfigManager

def main(database_id, schema_name, tasks_name):
    config_manager = ConfigManager(config_path=args.config_path)
    schema = config_manager.load_schema(schema_name)
    tasks = config_manager.load_tasks(tasks_name)

    notion_api_key = os.getenv('NOTION_API_KEY')

    notion_client = NotionClient(api_key=notion_api_key)
    notion_client.update_database(database_id=database_id, schema=schema)

    for task in tasks:
        notion_client.create_task(database_id=database_id, task=task)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Update an existing Notion database.")
    parser.add_argument('database_id', type=str, help="The ID of the database to update.")
    parser.add_argument('schema', type=str, help="Schema name without extension.")
    parser.add_argument('tasks', type=str, help="Tasks name without extension.")
    parser.add_argument('--config-path', type=str, default='plugins', help="Path to the configuration directory.")
    args = parser.parse_args()
    main(args.database_id, args.schema, args.tasks)


# File: tests\test_api.py
# File: tests/test_api.py
import pytest
from notion_client.api import NotionClient
from notion_client.models import SchemaConfig, TaskConfig

import sys
import os

@pytest.fixture
def notion_client():
    return NotionClient(api_key="fake_api_key")

def test_create_database(notion_client, requests_mock):
    schema = SchemaConfig(title="Test DB", properties={})
    requests_mock.post(
        'https://api.notion.com/v1/databases',
        json={"id": "fake_database_id"},
        status_code=200
    )
    database_id = notion_client.create_database(parent_id="fake_page_id", schema=schema)
    assert database_id == "fake_database_id"

def test_create_database_failure(notion_client, requests_mock):
    schema = SchemaConfig(title="Test DB", properties={})
    requests_mock.post(
        'https://api.notion.com/v1/databases',
        json={"error": "Unauthorized"},
        status_code=401
    )
    with pytest.raises(Exception):
        notion_client.create_database(parent_id="fake_page_id", schema=schema)


# File: tests\test_config.py
# File: tests/test_config.py
import os
from notion_client.config import ConfigManager
from notion_client.models import SchemaConfig

def test_load_schema(tmp_path):
    # Create a temporary schema file
    schema_content = '{"title": "Test Schema", "properties": {}}'
    schema_file = tmp_path / "test_schema.json"
    schema_file.write_text(schema_content)

    config_manager = ConfigManager(config_path=str(tmp_path))
    schema = config_manager.load_schema("test_schema")
    assert isinstance(schema, SchemaConfig)
    assert schema.title == "Test Schema"


# File: tests\test_models.py
# File: tests/test_models.py
from notion_client.models import SchemaConfig, PropertyConfig

def test_schema_config():
    data = {
        "title": "Test Schema",
        "properties": {
            "Name": PropertyConfig(property_type="title"),
            "Description": PropertyConfig(property_type="rich_text")
        }
    }
    schema = SchemaConfig(**data)
    assert schema.title == "Test Schema"
    assert "Name" in schema.properties
    assert schema.properties["Name"].property_type == "title"

def test_invalid_property_config():
    data = {
        "property_type": "invalid_type"
    }
    try:
        prop = PropertyConfig(**data)
    except ValueError as e:
        assert str(e) == "Invalid property type: invalid_type"
